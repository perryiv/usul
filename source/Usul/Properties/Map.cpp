
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2019, Perry L Miller IV
//  All rights reserved.
//  MIT License: https://opensource.org/licenses/mit-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Map of properties.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Properties/Map.h"
#include "Usul/Tools/NoThrow.h"

#include <functional>


namespace Usul {
namespace Properties {


///////////////////////////////////////////////////////////////////////////////
//
//  Constructors
//
///////////////////////////////////////////////////////////////////////////////

Map::Map() :
  _values()
{
}
Map::Map ( const Map &m ) :
  _values ( m._values )
{
}
Map::Map ( const Map::Values &values ) :
  _values ( values )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor
//
///////////////////////////////////////////////////////////////////////////////

Map::~Map()
{
  USUL_TOOLS_NO_THROW ( std::bind ( &Map::_destroyMap, this ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Assignment
//
///////////////////////////////////////////////////////////////////////////////

Map &Map::operator = ( const Map &m )
{
  _values = m._values;
  return *this;
}
Map &Map::operator = ( const Map::Values &values )
{
  _values = values;
  return *this;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy
//
///////////////////////////////////////////////////////////////////////////////

void Map::_destroyMap()
{
  _values.clear();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the property object.
//
///////////////////////////////////////////////////////////////////////////////

const Map::Object *Map::_getObject ( const std::string &name ) const
{
  Values::const_iterator i = _values.find ( name );
  return ( ( _values.end() == i ) ? nullptr : i->second.get() );
}
Map::Object *Map::_getObject ( const std::string &name )
{
  Values::iterator i = _values.find ( name );
  return ( ( _values.end() == i ) ? nullptr : i->second.get() );
}


} // namespace Properties
} // namespace Usul
