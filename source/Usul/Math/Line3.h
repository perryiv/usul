
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2009, 2019, Perry L Miller IV
//  All rights reserved.
//  MIT License: https://opensource.org/licenses/mit-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  3D line class.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _USUL_MATH_LINE_3D_H_
#define _USUL_MATH_LINE_3D_H_

#include "Usul/Math/ErrorChecker.h"
#include "Usul/Math/Vector3.h"


namespace Usul {
namespace Math {


template
<
  typename T,
  typename IndexType = unsigned int
>
class Line3
{
public:

  /////////////////////////////////////////////////////////////////////////////
  //
  //  Useful typedefs.
  //
  /////////////////////////////////////////////////////////////////////////////

  typedef T value_type;
  typedef IndexType size_type;
  typedef Line3 < T, IndexType > ThisType;
  typedef Usul::Math::Vector3 < T > Vec;
  typedef Vec Point;


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Default constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  Line3() :
    _p0 ( 0,  0,  0 ),
    _p1 ( 0,  0, -1 )
  {
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  Line3 ( const Point &p0, const Point &p1 ) :
    _p0 ( p0 ),
    _p1 ( p1 )
  {
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Copy constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  Line3 ( const Line3 &line ) :
    _p0 ( line._p0 ),
    _p1 ( line._p1 )
  {
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Set the value.
  //
  /////////////////////////////////////////////////////////////////////////////

  void set ( const Line3 &line )
  {
    _p0.set ( line._p0 );
    _p1.set ( line._p1 );
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Set the value.
  //
  /////////////////////////////////////////////////////////////////////////////

  void set ( const Point &p0, const Point &p1 )
  {
    _p0.set ( p0 );
    _p1.set ( p1 );
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Bracket operators.
  //
  /////////////////////////////////////////////////////////////////////////////

  Point &operator [] ( size_type i )
  {
    USUL_CHECK_INDEX_RANGE ( 2, i );
    return ( ( 0 == i ) ? _p0 : _p1 );
  }
  const Point &operator [] ( size_type i ) const
  {
    USUL_CHECK_INDEX_RANGE ( 2, i );
    return ( ( 0 == i ) ? _p0 : _p1 );
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Return true if the lines are equal.
  //
  /////////////////////////////////////////////////////////////////////////////

  static bool equal ( const Line3 &a, const Line3 &b )
  {
    const Point &a0 ( a[0] );
    const Point &a1 ( a[1] );

    const Point &b0 ( b[0] );
    const Point &b1 ( b[1] );

    return (
      ( ( a0[0] == b0[0] ) && ( a0[1] == b0[1] ) && ( a0[2] == b0[2] ) ) &&
      ( ( a1[0] == b1[0] ) && ( a1[1] == b1[1] ) && ( a1[2] == b1[2] ) )
    );
  }


private:

  Point _p0;
  Point _p1;
};


/////////////////////////////////////////////////////////////////////////////
//
//  Return true if the lines are equal.
//
/////////////////////////////////////////////////////////////////////////////

template < class T >
inline bool equal ( const Line3 < T > &a, const Line3 < T > &b )
{
  typedef Line3 < T > LineType;
  return ( LineType::equal ( a, b ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Useful typedefs.
//
///////////////////////////////////////////////////////////////////////////////

typedef Line3 < float          > Line3f;
typedef Line3 < double         > Line3d;
typedef Line3 < long double    > Line3ld;


} // namespace Math
} // namespace Usul


#endif // _USUL_MATH_LINE_3D_H_
