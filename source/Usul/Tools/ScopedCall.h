
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2019, Perry L Miller IV
//  All rights reserved.
//  MIT License: https://opensource.org/licenses/mit-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Scoped function call.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _USUL_TOOLS_SCOPED_CALL_H_
#define _USUL_TOOLS_SCOPED_CALL_H_

#include "Usul/Tools/NoCopying.h"

#include <memory>

namespace Usul {
namespace Tools {


///////////////////////////////////////////////////////////////////////////////
//
//  Base class for scoped call class.
//
///////////////////////////////////////////////////////////////////////////////

struct ScopedCall : public Usul::Tools::NoCopying
{
  typedef std::shared_ptr < ScopedCall > Ptr;

  ScopedCall()
  {
  }

  virtual ~ScopedCall()
  {
  }
};


///////////////////////////////////////////////////////////////////////////////
//
//  Calls the given function in the destructor.
//
///////////////////////////////////////////////////////////////////////////////

namespace Details
{
  template < class Function >
  struct TypedScopedCall : public ScopedCall
  {
    TypedScopedCall ( Function fun ) : ScopedCall(),
      _fun ( fun )
    {
    }

    virtual ~TypedScopedCall()
    {
      _fun();
    }

  private:

    Function _fun;
  };
}


///////////////////////////////////////////////////////////////////////////////
//
//  Helper function.
//
///////////////////////////////////////////////////////////////////////////////

template < class Function >
inline ScopedCall::Ptr makeScopedCall ( Function fun )
{
  return ScopedCall::Ptr ( new Details::TypedScopedCall < Function > ( fun ) );
}


} // namespace Tools
} // namespace Usul


///////////////////////////////////////////////////////////////////////////////
//
//  Helper macro.
//
///////////////////////////////////////////////////////////////////////////////

#define USUL_SCOPED_CALL(fun)\
  Usul::Tools::ScopedCall::Ptr scoped_call_at_line_##__LINE__ ( Usul::Tools::makeScopedCall ( fun ) )


#endif // _USUL_TOOLS_SCOPED_CALL_H_
